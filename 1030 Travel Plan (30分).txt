#include<cstring>
#include<algorithm>
#include<cstdio>
#include<iostream>
using namespace std;
const int MAXV = 510;
const int INF = 1000000000;

int n, m, st, ed, G[MAXV][MAXV], cost[MAXV][MAXV];
int d[MAXV], c[MAXV], pre[MAXV];
bool vis[MAXV] = { false };
void dij(int s)
{
	fill(d, d + MAXV, INF);
	fill(c, c + MAXV, INF);
	for (int i = 0; i < n; i++)
	{
		pre[i] = i;
	}
	d[s] = 0;
	c[s] = 0;
	for (int i = 0; i < n; i++)
	{
		int u = -1, MIN = INF;
		for (int j = 0; j < n; j++)
		{
			if (vis[j] == false && d[j] < MIN)
			{
				u = j;
				MIN = d[j];
			}
		}
		if (u == -1)return;
		vis[u] = true;
		for (int v = 0; v < n; v++)
		{
			if (vis[v] == false && G[u][v] != INF)
			{
				if (d[u] + G[u][v] < d[v])
				{
					d[v] = d[u] + G[u][v];
					c[v] = c[u] + cost[u][v];
					pre[v] = u;
				}
				else if (d[u] + G[u][v] == d[v] && c[u] + cost[u][v] < c[v])
				{
					c[v] = c[u] + cost[u][v];
					pre[v] = u;
				}
			}
		}
	}
}
void DFS(int v)
{
	if (v == st)
	{
		printf("%d ", v);
		return;
	}
	DFS(pre[v]);
	printf("%d ", v);
}
int main()
{
	scanf("%d%d%d%d", &n, &m, &st, &ed);
	int v, u;
	fill(G[0], G[0] + MAXV * MAXV, INF);
	for (int i = 0; i < m; i++)
	{
		cin >> u >> v;
		cin >> G[u][v] >> cost[u][v];
		G[v][u] = G[u][v];
		cost[v][u] = cost[v][u];
	}
	dij(st);
	DFS(ed);
	printf("%d %d\n", d[ed], c[ed]);
	system("pause");
	return 0;
}