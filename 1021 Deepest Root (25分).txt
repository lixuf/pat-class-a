#include<vector>
#include<iostream>
#include<algorithm>
using namespace std;
const int maxlen = 100010;
int father[maxlen];
vector<int> temp;
vector<int> node[maxlen];
vector<bool> root;
int findfather(int x)
{
	int a = x;
	while (x != father[x])
	{
		x = father[x];
	}
	while (a != father[a])
	{
		int z = a;
		a = father[a];
		father[z] = x;
	}
	return x;
}

void Union(int x, int y)
{
	int fa = findfather(x);
	int fb = findfather(y);
	if (fa != fb)
	{

		father[fa] = fb;
	}
}

void init(int n)
{
	root.push_back(0);
	temp.push_back(0);
	for (int n1 = 1; n1 <= n; n1++)
	{
		father[n1] = n1;
		temp.push_back(1);
		root.push_back(0);
	}
}

int cal(int n)
{
	int caln = 0;

	for (int n1 = 1; n1 <= n; n1++)
	{
		root[findfather(n1)]=1;
	}
	
	for (int n1 = 1; n1 <= n; n1++)
	{
		caln += root[n1];
	}
	return caln;
}

int maxhigh = 1;


void DFS(int x, int fore,int hi)
{
	if (hi > maxhigh)
	{
		maxhigh = hi;
	}
	if (hi > temp[x])
	{
		temp[x] = hi;
	}
	for (int n1 = 0; n1 < node[x].size(); n1++)
	{
		if (node[x][n1] != fore)
		{
			DFS(node[x][n1], x, hi + 1);
		}
	}
}

int main()
{
	int n;
	cin >> n;
    if(n==1)
    {
        cout<<n;
        return 0;
    }
	init(n);
	for (int n1 = 1; n1 < n; n1++)
	{
		int mid1, mid2;
		cin >> mid1 >> mid2;
		node[mid1].push_back(mid2);
		node[mid2].push_back(mid1);
		
		Union(mid1, mid2);
	}
	int nloop=cal(n);
	if (nloop!=1)
	{
		cout << "Error: "<<nloop<<" components";
		
		return 0;
	}
	for (int n1 = 1; n1 <= n; n1++)
	{
		DFS(n1, 0, 1);
	}
	int jump = 0;
	for (int n1 = 1; n1 <= n; n1++)
	{
	
		if (maxhigh == temp[n1])
		{
            	if (jump)
		{
			cout << "\n";
		}
			cout << n1;
			jump = 1;
		}
	}

	return 0;

}
