#include<iostream>
#include<algorithm>
using namespace std;
struct node
{
	int val, weight;
	node *lchild;
	node *rchild;
};
void create(node * & root, int val)
{
	root = new node;
	root->val = val;
	root->weight = 1;
	root->lchild = NULL;
	root->rchild = NULL;
	return;
}
int getweight(node * root)
{
	if (root == NULL)
	{
		return 0;
	}
	return root->weight;
}
void updataweight(node *&root)
{
	root->weight = max(getweight(root->lchild), getweight(root->rchild)) + 1;
	return;
}
int weightfector(node * root)
{
	return getweight(root->lchild) - getweight(root->rchild);
}
void R(node *& root)
{
	node * temp = root->lchild;
	root->lchild = temp->rchild;
	temp->rchild = root;
	updataweight(root);
	updataweight(temp);
	root = temp;
}
void L(node *& root)
{
	node *temp = root->rchild;
	root->rchild = temp->lchild;
	temp->lchild = root;
	updataweight(root);
	updataweight(temp);
	root = temp;
}
void insert(node * & root, int val)
{
	if (root == NULL)
	{
		create(root,val);
		return;
	}
	if (val < root->val)
	{
		insert(root->lchild,val);
		updataweight(root);
		if (weightfector(root) == 2)
		{
			if (weightfector(root->lchild) == 1)
			{
				R(root);
			}
			else
			{
				L(root->lchild);
				R(root);
			}
		}
	}
	else
	{
		insert(root->rchild, val);
		updataweight(root);
			if (weightfector(root) == -2)
			{
				if (weightfector(root->rchild) == -1)
				{
					L(root);
				}
				else
				{ 
					R(root->rchild);
					L(root);
				}
			}
	}
}
int main()
{
	int n;
	node *root = NULL;
	cin >> n;
	for (int n1 = 0; n1 < n; n1++)
	{
		
		int mid;
		cin >> mid;
		insert(root, mid);
	}
	cout << root->val;
	system("pause");
	return 0;
}