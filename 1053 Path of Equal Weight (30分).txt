#include<vector>
#include<iostream>
#include<algorithm>
#include<queue>
using namespace std;
const int maxlen = 102;
struct Node
{
	int sum_wight;
	int father;
	int wight;
	vector<int> child;
}node[maxlen];
bool cmp(vector<int> &a, vector<int> &b)
{
	int na = a.size() - 1;
	int nb = b.size() - 1;
	while (na!=-1||nb!=-1)
	{
		if (node[a[na]].wight >node[b[nb]].wight)
		{
			return 1;
		}
		else if(node[a[na]].wight < node[b[nb]].wight)
		{
			return 0;
		}
		na--;
		nb--;
	}
	return 0;
	
}
int main()
{
	int n, m,s;
	cin >> n >> m>>s;
	for (int n1 = 0; n1 < n; n1++)
	{
		int mid;
		cin >> mid;
		node[n1].wight = mid;
	}
	for (int n1 = 0; n1 < m; n1++)
	{
		int root;
		int child;
		cin >> root >> child;
		for (int n2 = 0; n2 < child; n2++)
		{
			int mid;
			cin >> mid;
			node[root].child.push_back(mid);
		}
	}
	queue<int> level;
	level.push(0);
	node[0].sum_wight = node[0].wight;
	int max_h;
	vector<int> leaf;
	while (!level.empty())
	{
		max_h = level.size();
		
		
		for (int n2 = 0; n2 < max_h; n2++)
		{
			if (node[level.front()].child.size() == 0)
			{
				if (node[level.front()].sum_wight == s)
				{
					leaf.push_back(level.front());
				}
				level.pop();
			}
			else
			{
				
				for (int n1 = 0; n1 < node[level.front()].child.size(); n1++)
				{
					level.push(node[level.front()].child[n1]);
					node[node[level.front()].child[n1]].father= level.front();
					node[node[level.front()].child[n1]].sum_wight = node[level.front()].sum_wight+node[node[level.front()].child[n1]].wight;
				}

				level.pop();
			}
		}

		
	}
	vector<vector<int>> result;

	
	for (int n1 = 0; n1 < leaf.size(); n1++)
	{
		vector<int>mid;
		while (1)
		{
			mid.push_back(leaf[n1]);
			if (leaf[n1] != 0)
			{
				leaf[n1] = node[leaf[n1]].father;
			}
			else
			{
				break;
			}	
		}
		result.push_back(mid);
	}
	sort(result.begin(), result.end(), cmp);
	for (int n1 = 0; n1 < result.size(); n1++)
	{
		for (int n2 = result[n1].size()-1; n2 > -1; n2--)
		{
			cout << node[result[n1][n2]].wight;
			if (n2 != 0)
			{
				cout << ' ';
			}
			else
			{
				cout << '\n';
			}
		}
	}
	system("pause");
	return 0;

}