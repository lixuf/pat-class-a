#include<iostream>
#include<vector>
#include<map>
#include<string>
using namespace std;
struct node
{
	int index;
	int cost;
	node(int _index, int _val) :index(_index), cost(_val) {};
};
const int inf = 1000000000;
const int maxn = 210;
map<string, int> s2i;
map<int, string>i2s;
map<int, int> happy;
vector<node> tu[maxn];
int n, k;
int des;
vector<int> pre;
void dij()
{
	int rou_num = 0;
	des = s2i["ROM"];
	vector<bool> vis(n, false);
	vector<int> ave;
	vector<int> num(n,0);
	vector<int> mincost(n,inf);
	vector<int> happy_c(n, 0);
	mincost[0] = 0;
	for (int n1=0; n1 < n; n1++)
	{
		int u = -1, min = inf;
		for (int n2 = 0; n2 < n; n2++)
		{
			if (min > mincost[n2] && vis[n2] == false)
			{
				min = mincost[n2];
				u = n2;
			}
		}
		if (u == -1)return;
		vis[u] = true;
		for (int n2 = 0; n2 < tu[u].size(); n2++)
		{
			int ind = tu[u][n2].index;
			int cost = tu[u][n2].cost;
			if (vis[ind] == false && mincost[ind] > mincost[u] + cost)
			{
				mincost[ind] = mincost[u] + cost;
				num[ind] =num[u]+ 1;
				happy_c[ind] = happy_c[u] + happy[ind];
				pre[ind] = u;
				if (ind == des)
				{
					rou_num = 1;
				}
			}
			else if (vis[ind] == false && mincost[ind] == mincost[u] + cost && happy_c[ind] < happy_c[u] + happy[ind])
			{
				mincost[ind] = mincost[u] + cost;
				num[ind] = num[u] + 1;
				happy_c[ind] = happy_c[u] + happy[ind];
				pre[ind] = u;
				if (ind == des)
				{
					rou_num += 1;
				}
			}
			else if (vis[ind] == false && mincost[ind] == mincost[u] + cost && happy_c[ind] == happy_c[u] + happy[ind] && num[ind] > num[u] + 1)
			{
				mincost[ind] = mincost[u] + cost;
				num[ind] = num[u] + 1;
				happy_c[ind] = happy_c[u] + happy[ind];
				pre[ind] = u;
				if (ind == des)
				{
					rou_num += 1;
				}
			}
			else if (vis[ind] == false && mincost[ind] == mincost[u] + cost && ind == des)
			{
				rou_num += 1;
			}
		}
	}
	cout << rou_num << " " << mincost[des] << " " << happy_c[des] << " " << happy_c[des] / num[des] << "\n";
}
void DFS(int inde)
{
	if (inde != 0)
	{
		DFS(pre[inde]);
	}
	cout << i2s[inde];
	if (inde != des)
	{
		cout << "->";
	}
}
int main()
{
	cin >> n >> k;
	for (int n1 = 0; n1 < n; n1++)
	{
		pre.push_back(n1);
		string mid1;
		cin >> mid1;
		s2i[mid1] = n1;
		i2s[n1] = mid1;
		if (n1 == 0)
		{
			happy[n1] = 0;
			continue;
		}
		int mid2;
		cin >> mid2;
		happy[n1] = mid2;
	}
	for (int n1 = 0; n1 < k; n1++)
	{
		string mid1, mid2;
		int mid3;
		cin >> mid1 >>  mid2 >> mid3;
		int ind1, ind2;
		ind1 = s2i[mid1];
		ind2 = s2i[mid2];
		tu[ind1].push_back(node(ind2, mid3));
		tu[ind2].push_back(node(ind1, mid3));
	}
	dij();
	DFS(des);
	system("pause");
	return 0;
}